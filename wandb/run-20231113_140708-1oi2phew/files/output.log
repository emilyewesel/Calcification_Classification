/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loggers/wandb.py:396: UserWarning: There is a wandb run already in progress and newly created instances of `WandbLogger` will reuse this run. If this is not desired, call `wandb.finish()` before instantiating `WandbLogger`.
  rank_zero_warn(
Global seed set to 23
GPU available: False, used: False
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
  | Name | Type             | Params
------------------------------------------
0 | net  | ResNet           | 14.4 M
1 | loss | CrossEntropyLoss | 0
------------------------------------------
14.4 M    Trainable params
0         Non-trainable params
14.4 M    Total params
57.436    Total estimated model params size (MB)
159 53 159 53
{1: 0.4676470588235294, 2: 2.2714285714285714, 3: 0.99375, 4: 1.272, 5: 1.59}
Train dataset length: 159
Validation dataset length: 53
159 53 159 53
{1: 0.4676470588235294, 2: 2.2714285714285714, 3: 0.99375, 4: 1.272, 5: 1.59}
Train dataset length: 159
Validation dataset length: 53

Sanity Checking DataLoader 0:   0%|                                                                                                                                      | 0/2 [00:00<?, ?it/s]y_pred argmax: tensor([2, 4, 4, 2, 2, 2, 4, 2])
label: tensor([0, 4, 0, 2, 0, 2, 3, 0])
score tensor(0.3750)
Sanity Checking DataLoader 0:  50%|███████████████████████████████████████████████████████████████                                                               | 1/2 [00:19<00:19, 19.50s/it]y_pred argmax: tensor([4, 2, 2, 2, 2, 2, 4, 2])
label: tensor([0, 2, 2, 3, 0, 3, 4, 3])
score tensor(0.3750)
Epoch 0:   0%|                                                                                                                                                          | 0/26 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "main_as.py", line 85, in <module>
    main_resnet(wandb, wandb_logger)
  File "main_as.py", line 64, in main_resnet
    trainer.fit(model, data)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 603, in fit
    call._call_and_handle_interrupt(
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/call.py", line 38, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 645, in _fit_impl
    self._run(model, ckpt_path=self.ckpt_path)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1098, in _run
    results = self._run_stage()
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1177, in _run_stage
    self._run_train()
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1200, in _run_train
    self.fit_loop.run()
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/fit_loop.py", line 267, in advance
    self._outputs = self.epoch_loop.run(self._data_fetcher)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 214, in advance
    batch_output = self.batch_loop.run(kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(optimizers, kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/loop.py", line 199, in run
    self.advance(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 200, in advance
    result = self._run_optimization(kwargs, self._optimizers[self.optim_progress.optimizer_position])
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 247, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, kwargs.get("batch_idx", 0), closure)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 357, in _optimizer_step
    self.trainer._call_lightning_module_hook(
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py", line 1342, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/core/module.py", line 1661, in optimizer_step
    optimizer.step(closure=optimizer_closure)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/core/optimizer.py", line 169, in step
    step_output = self._strategy.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/strategies/strategy.py", line 234, in optimizer_step
    return self.precision_plugin.optimizer_step(
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 121, in optimizer_step
    return optimizer.step(closure=closure, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/torch/optim/optimizer.py", line 140, in wrapper
    out = func(*args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/torch/optim/optimizer.py", line 23, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/torch/optim/adam.py", line 234, in step
    adam(params_with_grad,
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/torch/optim/adam.py", line 300, in adam
    func(params,
  File "/Users/emilywesel/opt/anaconda3/lib/python3.8/site-packages/torch/optim/adam.py", line 348, in _single_tensor_adam
    assert param.is_cuda and step_t.is_cuda, "If capturable=True, params and state_steps must be CUDA tensors."
AssertionError: If capturable=True, params and state_steps must be CUDA tensors.